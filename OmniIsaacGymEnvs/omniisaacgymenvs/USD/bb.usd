#usda 1.0

def Xform "bb_description" (
    apiSchemas = ["PhysicsArticulationRootAPI", "PhysxArticulationAPI"]
)
{
    def Scope "Looks"
    {
        def Material "material_red"
            {
                token outputs:mdl:displacement.connect = </go1_description/Looks/material_red/Shader.outputs:out>
                token outputs:mdl:surface.connect = </go1_description/Looks/material_red/Shader.outputs:out>
                token outputs:mdl:volume.connect = </go1_description/Looks/material_red/Shader.outputs:out>

                def Shader "Shader"
                {
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                    uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                    color3f inputs:diffuse_color_constant = (0.8, 0, 0) (
                        customData = {
                            float3 default = (0.2, 0.2, 0.2)
                        }
                        displayGroup = "Albedo"
                        displayName = "Albedo Color"
                        doc = "This is the albedo base color"
                        hidden = false
                    )
                    token outputs:out
                }
            }
    }

    def Xform "box" (
        apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        vector3f physics:angularVelocity = (0, 0, 0)
        point3f physics:centerOfMass = (0, 0, 0)
        float3 physics:diagonalInertia = (0.000001, 0.000001, 0.000001)
        float physics:mass = 0.00001
        vector3f physics:velocity = (0, 0, 0)
        quatd xformOp:orient = (0.0922961911344169, -0.7010573572667613, 0.7010573572667612, 0.09229613613997349)
        double3 xformOp:scale = (3.0, 0.2, 0.05)
        double3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Mesh "visuals"
        {
            float3[] extent = [(-1.5, -0.1, -0.025), (1.5, 0.1, 0.025)]
            uniform token subdivisionScheme = "bilinear"
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def Cube "collisions" (
            apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            float3[] extent = [(-1.5, -0.1, -0.025), (1.5, 0.1, 0.025)]
            uniform token purpose = "guide"
            double size = 1
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }
    }
}